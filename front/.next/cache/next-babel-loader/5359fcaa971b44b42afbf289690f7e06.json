{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { takeLatest, call, all, fork, put } from \"redux-saga/effects\";\nimport { BACKEND_URL } from \"../src/dummy\";\nimport axios from \"axios\";\nexport var LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\naxios.defaults.baseURL = \"\".concat(BACKEND_URL, \"/api\");\n\nfunction loginAPI(loginData) {\n  return axios.post(\"/user/login\", loginData, {\n    withCredentials: true // 쿠키 주고받기 위해 넣어준다.\n\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put -> Action 실행\n            type: LOG_IN_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/ddrrp/Desktop/local/score____temp/front/sagas/user.js"],"names":["login","watchLogin","userSaga","takeLatest","call","all","fork","put","BACKEND_URL","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","defaults","baseURL","loginAPI","loginData","post","withCredentials","action","data","result","type","console","error"],"mappings":";;oDAgBUA,K;qDAiBAC,U;qDAIeC,Q;;AArCzB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEPH,KAAK,CAACI,QAAN,CAAeC,OAAf,aAA4BN,WAA5B;;AAEA,SAASO,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,SAAOP,KAAK,CAACQ,IAAN,CAAW,aAAX,EAA0BD,SAA1B,EAAqC;AAC1CE,IAAAA,eAAe,EAAE,IADyB,CACnB;;AADmB,GAArC,CAAP;AAGD;;AAED,SAAUlB,KAAV,CAAgBmB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMf,IAAI,CAACW,QAAD,EAAWI,MAAM,CAACC,IAAlB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMd,GAAG,CAAC;AACR;AACAe,YAAAA,IAAI,EAAEX,cAFE;AAGRS,YAAAA,IAAI,EAAEC;AAHE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIE,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMjB,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAEV,cADE;AAERY,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUvB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAME,UAAU,CAACO,cAAD,EAAiBV,KAAjB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CAACC,IAAI,CAACL,UAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, call, all, fork, put } from \"redux-saga/effects\"\r\nimport { BACKEND_URL } from \"../src/dummy\"\r\nimport axios from \"axios\"\r\n\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\"\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\"\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\"\r\n\r\naxios.defaults.baseURL = `${BACKEND_URL}/api`\r\n\r\nfunction loginAPI(loginData) {\r\n  return axios.post(\"/user/login\", loginData, {\r\n    withCredentials: true, // 쿠키 주고받기 위해 넣어준다.\r\n  })\r\n}\r\n\r\nfunction* login(action) {\r\n  try {\r\n    const result = yield call(loginAPI, action.data) // call -> loginAPI(action.data)\r\n    yield put({\r\n      // put -> Action 실행\r\n      type: LOG_IN_SUCCESS,\r\n      data: result,\r\n    })\r\n  } catch (e) {\r\n    console.error(e)\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e,\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin)])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}