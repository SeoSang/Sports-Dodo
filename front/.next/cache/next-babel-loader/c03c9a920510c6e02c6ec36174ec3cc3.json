{"ast":null,"code":"import { takeLatest, call, all, fork, put } from \"redux-saga/effects\";\nimport { BACKEND_URL } from \"../src/dummy\";\nimport axios from \"axios\";\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\naxios.defaults.baseURL = `${BACKEND_URL}/api`;\n\nfunction loginAPI(loginData) {\n  return axios.post(\"/user/login\", loginData, {\n    withCredentials: true // 쿠키 주고받기 위해 넣어준다.\n\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}","map":{"version":3,"sources":["C:/Users/ddrrp/Desktop/local/score____temp/front/sagas/user.js"],"names":["takeLatest","call","all","fork","put","BACKEND_URL","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","defaults","baseURL","loginAPI","loginData","post","withCredentials","login","action","result","data","type","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEPH,KAAK,CAACI,QAAN,CAAeC,OAAf,GAA0B,GAAEN,WAAY,MAAxC;;AAEA,SAASO,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,SAAOP,KAAK,CAACQ,IAAN,CAAW,aAAX,EAA0BD,SAA1B,EAAqC;AAC1CE,IAAAA,eAAe,EAAE,IADyB,CACnB;;AADmB,GAArC,CAAP;AAGD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACW,QAAD,EAAWK,MAAM,CAACE,IAAlB,CAAzB;AACA,UAAMf,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEZ,cADE;AAERW,MAAAA,IAAI,EAAED;AAFE,KAAD,CAAT;AAID,GAND,CAME,OAAOG,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEX,cADE;AAERc,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUG,UAAV,GAAuB;AACrB,QAAMxB,UAAU,CAACO,cAAD,EAAiBS,KAAjB,CAAhB;AACD;;AAED,eAAe,UAAUS,QAAV,GAAqB;AAClC,QAAMvB,GAAG,CAAC,CAACC,IAAI,CAACqB,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, all, fork, put } from \"redux-saga/effects\"\r\nimport { BACKEND_URL } from \"../src/dummy\"\r\nimport axios from \"axios\"\r\n\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\"\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\"\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\"\r\n\r\naxios.defaults.baseURL = `${BACKEND_URL}/api`\r\n\r\nfunction loginAPI(loginData) {\r\n  return axios.post(\"/user/login\", loginData, {\r\n    withCredentials: true, // 쿠키 주고받기 위해 넣어준다.\r\n  })\r\n}\r\n\r\nfunction* login(action) {\r\n  try {\r\n    const result = yield call(loginAPI, action.data)\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result,\r\n    })\r\n  } catch (e) {\r\n    console.error(e)\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e,\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin)])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}